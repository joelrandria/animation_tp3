#ifndef __ARRAY2D_H__
#define __ARRAY2D_H__

#include <vector>
#include <assert.h>

class Array2D
{
private:

  int m_dimX, m_dimY;

  std::vector<float> m_data;

public:

  Array2D() { m_dimX = m_dimY = 0; }
  Array2D(const Array2D& array) { *this = array; }
  ~Array2D() {}

  void init(const int DIMX, const int DIMY) { m_dimX = DIMX; m_dimY = DIMY; m_data.resize(m_dimX * m_dimY); }

  void setAll(const float v) { m_data.assign(m_dimX * m_dimY, v); }

  const int dimX() const { return m_dimX; }
  const int dimY() const { return m_dimY; }

  float& operator()(const int x, const int y)
  {
    assert( x>=0 && x<m_dimX && y>=0 && y<m_dimY);
    return m_data[ y*m_dimX+x ];
  }
  float operator()(const int x, const int y) const
  {
    assert( x>=0 && x<m_dimX && y>=0 && y<m_dimY);
    return m_data[ y*m_dimX+x ];
  }
  Array2D operator+(const Array2D& array) const
  {
    int x;
    int y;

    Array2D r;

    assert(m_dimX == array.m_dimX && m_dimY == array.m_dimY);

    r.init(m_dimX, m_dimY);

    for (x = 0; x < m_dimX; ++x)
      for (y = 0; y < m_dimY; ++y)
	r(x, y) = (*this)(x, y) + array(x, y);

    return r;
  }
  Array2D& operator=(const Array2D& array)
  {
    int x;
    int y;

    init(array.dimX(), array.dimY());

    for (x = 0; x < m_dimX; ++x)
      for (y = 0; y < m_dimY; ++y)
	(*this)(x, y) = array(x, y);

    return *this;
  }

  float interpolate(const float x, const float y) const
  {
    if ((x<0) || (x>m_dimX) || (y<0) || (y>m_dimY)) return 0.f;

    int X = int(x);
    int Y = int(y);

    if ((X+1>=m_dimX) || (Y+1>=m_dimY)) return operator()(X,Y);

    float IX_b = (x-X)*operator()(X+1,Y) + (X+1-x)*operator()(X,Y);
    float IX_h = (x-X)*operator()(X+1,Y+1) + (X+1-x)*operator()(X,Y+1);

    return (y-Y)*IX_h + (Y+1-y)*IX_b;
  }
};

#endif
